{
    "Python CP Template": {
        "prefix": "!pytemp",
        "body": [
            "import os",
            "import sys",
            "import math",
            "import collections",
            "import itertools",
            "from io import BytesIO, IOBase",
            "",
            "BUFSIZE = 8192",
            "",
            "class FastIO(IOBase):",
            "    \"\"\"",
            "    Class for faster I/O during execution",
            "    of program on server",
            "    \"\"\"",
            "    newlines = 0",
            "",
            "    def __init__(self, file):",
            "        self._fd = file.fileno()",
            "        self.buffer = BytesIO()",
            "        self.writable = \"x\" in file.mode or \"r\" not in file.mode",
            "        self.write = self.buffer.write if self.writable else None",
            "",
            "    def read(self):",
            "        while True:",
            "            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))",
            "            if not b:",
            "                break",
            "            ptr = self.buffer.tell()",
            "            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)",
            "        self.newlines = 0",
            "        return self.buffer.read()",
            "",
            "    def readline(self):",
            "        while self.newlines == 0:",
            "            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))",
            "            self.newlines = b.count(b\"\\n\") + (not b)",
            "            ptr = self.buffer.tell()",
            "            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)",
            "        self.newlines -= 1",
            "        return self.buffer.readline()",
            "",
            "    def flush(self):",
            "        if self.writable:",
            "            os.write(self._fd, self.buffer.getvalue())",
            "            self.buffer.truncate(0), self.buffer.seek(0)",
            "",
            "",
            "class IOWrapper(IOBase):",
            "    \"\"\"",
            "    Wrapper for FastIO class",
            "    \"\"\"",
            "",
            "    def __init__(self, file):",
            "        self.buffer = FastIO(file)",
            "        self.flush = self.buffer.flush",
            "        self.writable = self.buffer.writable",
            "        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))",
            "        self.read = lambda: self.buffer.read().decode(\"ascii\")",
            "        self.readline = lambda: self.buffer.readline().decode(\"ascii\")",
            "",
            "",
            "sys.stdin =  IOWrapper(sys.stdin)",
            "sys.stdout = IOWrapper(sys.stdout)",
            "",
            "",
            "def inp(datatype = int):",
            "    \"\"\"",
            "    Function for faster user input",
            "    Params",
            "    <datatype>  type of user input [str, int, float]",
            "                Default type => int",
            "    \"\"\"",
            "    return datatype(sys.stdin.readline())",
            "",
            "def out(answer):",
            "    \"\"\"",
            "    Function for faster output to console",
            "    \"\"\"",
            "    return sys.stdout.write(str(answer) + \"\\n\")",
            "",
            "def map_input(datatype = int):",
            "    \"\"\"",
            "    Function for taking multiple user inputs",
            "    Params",
            "    <datatype>  type of user input [str, int, float]",
            "                Default type => int",
            "    \"\"\"",
            "    return map(datatype, sys.stdin.readline().split())",
            "",
            "def list_input(datatype = int):",
            "    \"\"\"",
            "    Function for taking list input",
            "    Params",
            "    <datatype>  type of user input [str, int, float]",
            "                Default type => int",
            "    \"\"\"",
            "    return list(map(datatype, sys.stdin.readline().split()))",
            "",
            "def testcase(solve_function, number: int = 1):",
            "    \"\"\"",
            "    Function for running test cases",
            "    Params",
            "    <solve_function>    function to be tested",
            "    <number>            number of tests",
            "                        Default => 1",
            "    \"\"\"",
            "    while (number != 0):",
            "        solve_function()",
            "        number -= 1",
            "",
            "",
            "def solve() -> None:",
            "   ${1:pass}",
            "",
            "",
            "test_num = inp()",
            "testcase(solve, test_num)",
            ""
        ],
        "description": "Competitive Programming Template"
    }
}
